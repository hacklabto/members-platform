// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0

package queries

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type ListPermission string

const (
	ListPermissionEveryone  ListPermission = "everyone"
	ListPermissionMembers   ListPermission = "members"
	ListPermissionWhitelist ListPermission = "whitelist"
)

func (e *ListPermission) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ListPermission(s)
	case string:
		*e = ListPermission(s)
	default:
		return fmt.Errorf("unsupported scan type for ListPermission: %T", src)
	}
	return nil
}

type NullListPermission struct {
	ListPermission ListPermission
	Valid          bool // Valid is true if ListPermission is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullListPermission) Scan(value interface{}) error {
	if value == nil {
		ns.ListPermission, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ListPermission.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullListPermission) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ListPermission), nil
}

type List struct {
	ID              int32
	Name            string
	SendPermissions NullListPermission
	ReadPermissions NullListPermission
}

type ListMember struct {
	ListID      int32
	MemberEmail string
	CanRead     sql.NullBool
	CanWrite    sql.NullBool
}

type ListMessage struct {
	ID              uuid.UUID
	MessageID       string
	ListID          int32
	ParentMessageID sql.NullString
	ThreadID        uuid.UUID
	Mailfrom        string
	Subject         string
	Ts              time.Time
}
