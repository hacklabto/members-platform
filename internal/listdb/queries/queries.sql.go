// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: queries.sql

package queries

import (
	"context"
	"time"
)

const addMessage = `-- name: AddMessage :exec
insert into list_messages (
    message_id,
    thread_id,
    mailfrom,
    subject,
    ts
) values (
    $1,
    coalesce((select thread_id from list_messages m where m.message_id = $2), gen_random_uuid()),
    $3,
    $4,
    $5
)
`

type AddMessageParams struct {
	MessageID   string
	MessageID_2 string
	Mailfrom    string
	Subject     string
	Ts          time.Time
}

func (q *Queries) AddMessage(ctx context.Context, arg AddMessageParams) error {
	_, err := q.db.ExecContext(ctx, addMessage,
		arg.MessageID,
		arg.MessageID_2,
		arg.Mailfrom,
		arg.Subject,
		arg.Ts,
	)
	return err
}

const checkCanSendToList = `-- name: CheckCanSendToList :one
select can_send_to_list((select list_id from lists where name = $1), $2)
`

type CheckCanSendToListParams struct {
	Name  string
	Email string
}

func (q *Queries) CheckCanSendToList(ctx context.Context, arg CheckCanSendToListParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkCanSendToList, arg.Name, arg.Email)
	var can_send_to_list bool
	err := row.Scan(&can_send_to_list)
	return can_send_to_list, err
}

const getListByEmail = `-- name: GetListByEmail :one
select id, name from lists where name || '@hacklab.to' = $1
`

type GetListByEmailRow struct {
	ID   int32
	Name string
}

func (q *Queries) GetListByEmail(ctx context.Context, name string) (GetListByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getListByEmail, name)
	var i GetListByEmailRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getListById = `-- name: GetListById :one
select id, name, send_permissions, read_permissions from lists where id = $1
`

func (q *Queries) GetListById(ctx context.Context, id int32) (List, error) {
	row := q.db.QueryRowContext(ctx, getListById, id)
	var i List
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SendPermissions,
		&i.ReadPermissions,
	)
	return i, err
}

const getListRecipients = `-- name: GetListRecipients :many
select member_email from list_members where list_id = $1
`

func (q *Queries) GetListRecipients(ctx context.Context, listID int32) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getListRecipients, listID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var member_email string
		if err := rows.Scan(&member_email); err != nil {
			return nil, err
		}
		items = append(items, member_email)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
