// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: queries.sql

package queries

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const getMemberByUsername = `-- name: GetMemberByUsername :one
select username, name, picture, picture_thumb, join_date, refer_to, contact_info, interests, badges, board, sudoer from members where username = $1
`

func (q *Queries) GetMemberByUsername(ctx context.Context, username string) (Member, error) {
	row := q.db.QueryRowContext(ctx, getMemberByUsername, username)
	var i Member
	err := row.Scan(
		&i.Username,
		&i.Name,
		&i.Picture,
		&i.PictureThumb,
		&i.JoinDate,
		&i.ReferTo,
		&i.ContactInfo,
		&i.Interests,
		pq.Array(&i.Badges),
		&i.Board,
		&i.Sudoer,
	)
	return i, err
}

const getMembers = `-- name: GetMembers :many
select username, name, picture, picture_thumb, join_date, refer_to, contact_info, interests, badges, board, sudoer from members order by lower(username) asc
`

func (q *Queries) GetMembers(ctx context.Context) ([]Member, error) {
	rows, err := q.db.QueryContext(ctx, getMembers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Member
	for rows.Next() {
		var i Member
		if err := rows.Scan(
			&i.Username,
			&i.Name,
			&i.Picture,
			&i.PictureThumb,
			&i.JoinDate,
			&i.ReferTo,
			&i.ContactInfo,
			&i.Interests,
			pq.Array(&i.Badges),
			&i.Board,
			&i.Sudoer,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const memberize = `-- name: Memberize :exec
insert into members
(username, name, picture, picture_thumb, join_date, contact_info)
values
($1, $2, $3, $4, $5, $6)
`

type MemberizeParams struct {
	Username     string
	Name         string
	Picture      sql.NullString
	PictureThumb sql.NullString
	JoinDate     sql.NullString
	ContactInfo  sql.NullString
}

func (q *Queries) Memberize(ctx context.Context, arg MemberizeParams) error {
	_, err := q.db.ExecContext(ctx, memberize,
		arg.Username,
		arg.Name,
		arg.Picture,
		arg.PictureThumb,
		arg.JoinDate,
		arg.ContactInfo,
	)
	return err
}

const updateProfile = `-- name: UpdateProfile :exec
update members set refer_to = $1, contact_info = $2, interests = $3 where username = $4
`

type UpdateProfileParams struct {
	ReferTo     sql.NullString
	ContactInfo sql.NullString
	Interests   sql.NullString
	Username    string
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) error {
	_, err := q.db.ExecContext(ctx, updateProfile,
		arg.ReferTo,
		arg.ContactInfo,
		arg.Interests,
		arg.Username,
	)
	return err
}
